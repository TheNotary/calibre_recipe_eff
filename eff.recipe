#!/usr/bin/env python2
# vim:fileencoding=utf-8
# License: GPLv3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

from collections import OrderedDict
from calibre.web.feeds.news import BasicNewsRecipe

the_root_url = 'https://www.eff.org/rss/updates.xml'

class EconomicAndPoliticalWeekly(BasicNewsRecipe):
    title                  = 'Electronic Frontier Foundation'
    __author__             = 'TheNotary'
    description            = 'Technology and Political news'
    publisher              = 'Electronic Frontier Foundation'
    category               = 'news, politics, technology'
    oldest_article         = 7
    max_articles_per_feed  = 100
    no_stylesheets         = True
    use_embedded_content   = False
    simultaneous_downloads = 1
    encoding               = 'utf-8'
    language               = 'en_US'
    publication_type       = 'newspaper'
    masthead_url           = 'http://www.epw.in/system/files/epw_masthead.png'

    #keep_only_tags = [
    #    dict(id=['block-system-main', 'page-title']),
    #]

    def parse_index(self):
        soup = self.index_to_soup(the_root_url)
        # finds a node encapsulating a list of articles
        main_container = soup.find('channel')

        sections = OrderedDict()
        current_section = None

        # For each div representing an item in the article container
        for div in main_container.findAll('item'):
            # The $('.block-inner h2') contains a string of text serving as a section
            # section = self.tag_to_string(div.findParent(attrs={'class':'block-inner'}).find('h2'))
            section = self.tag_to_string(div.find('category'))

            if section != current_section: # switch this to be the current section...
                current_section = section
                if section not in sections:
                    sections[section] = []  # create an empty array for this section
                self.log('\n\n' + section)


            title = self.tag_to_string(div.title)
            url = self.tag_to_string(div.find('link'))
            desc = self.tag_to_string(div.find('description'))

            self.log('\t', title, url)
            self.log('\t\t', desc)

            # Add title, url, and desc to the 2D array we're building of all the articles
            sections[current_section].append({'title':title, 'url':url, 'description':desc})

        import code; code.interact(local=locals())  # debug

        return [(section_name, child_articles) for section_name, child_articles in sections.iteritems() if child_articles]




